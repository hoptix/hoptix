# ---- ULTRA-AGGRESSIVE PYDANTIC V2 DOCKERFILE WITH CUDA ----
# This forcefully maintains Pydantic v2 through all installations
# Uses Python base image that includes Ubuntu 22.04

# Using Python 3.10 slim image (based on Debian, more reliable than Ubuntu for Docker)
FROM python:3.10-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV PIP_NO_CACHE_DIR=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Note: CUDA runtime will be available when running on Porter with GPU
# For local testing, we'll use CPU-only PyTorch which is sufficient

# Install system dependencies (Python already included in base image)
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libsndfile1 \
    git \
    curl \
    gcc \
    g++ \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements
COPY backend/requirements.txt ./requirements.txt
COPY backend/requirements-voice-minimal.txt ./requirements-voice-minimal.txt

# STEP 1: Nuclear option - remove ALL pydantic files
RUN pip install --upgrade pip setuptools wheel && \
    echo "=== REMOVING ALL PYDANTIC FILES ===" && \
    pip uninstall -y pydantic pydantic-core pydantic-settings 2>/dev/null || true && \
    pip freeze | grep -i pydantic | xargs pip uninstall -y 2>/dev/null || true && \
    rm -rf /usr/local/lib/python3*/site-packages/pydantic* && \
    rm -rf /usr/local/lib/python3*/site-packages/Pydantic* && \
    rm -rf /usr/local/lib/python3*/site-packages/*pydantic* && \
    find /usr/local -name "*.so" | grep -i pydantic | xargs rm -f 2>/dev/null || true && \
    find /usr/local -name "*pydantic*" -type f -delete 2>/dev/null || true && \
    find /usr/local -name "*pydantic*" -type d -exec rm -rf {} + 2>/dev/null || true && \
    echo "=== PYDANTIC REMOVAL COMPLETE ==="

# STEP 2: Create STRICT constraint file that LOCKS critical versions
RUN echo "=== CREATING CONSTRAINTS FILE ===" && \
    echo "pydantic==2.9.2" > /tmp/constraints.txt && \
    echo "pydantic-core==2.23.4" >> /tmp/constraints.txt && \
    echo "pydantic-settings==2.6.1" >> /tmp/constraints.txt && \
    echo "typing-extensions>=4.6.1" >> /tmp/constraints.txt && \
    echo "torch==2.0.1" >> /tmp/constraints.txt && \
    echo "torchaudio==2.0.2" >> /tmp/constraints.txt && \
    echo "numpy>=1.22,<1.24" >> /tmp/constraints.txt && \
    echo "# NeMo requires numpy<1.24" >> /tmp/constraints.txt && \
    cat /tmp/constraints.txt

# STEP 3: Install Pydantic v2 with NO DEPENDENCIES (most aggressive)
RUN echo "=== INSTALLING PYDANTIC V2 (NO DEPS) ===" && \
    pip install --no-cache-dir --force-reinstall --no-deps \
        pydantic==2.9.2 \
        pydantic-core==2.23.4 \
        pydantic-settings==2.6.1 && \
    pip install --no-cache-dir \
        typing-extensions>=4.6.1 \
        annotated-types>=0.4.0

# STEP 4: VERIFY Pydantic v2 (fail build if not v2)
RUN echo "=== VERIFYING PYDANTIC V2 ===" && \
    python -c "\
import pydantic; \
print(f'Pydantic: {pydantic.__version__}'); \
print(f'Location: {pydantic.__file__}'); \
assert pydantic.__version__ == '2.9.2', f'WRONG VERSION: {pydantic.__version__}'; \
from pydantic import TypeAdapter; \
print('✓ TypeAdapter OK');" || (echo "FATAL: PYDANTIC V2 INSTALL FAILED" && exit 1)

# STEP 5: Install PyTorch/torchaudio with CUDA 11.7 support
# This version will work on both CPU and GPU environments
RUN echo "=== INSTALLING PYTORCH WITH CUDA 11.7 ===" && \
    pip install --no-cache-dir \
    torch==2.0.1 \
    torchaudio==2.0.2 \
    --index-url https://download.pytorch.org/whl/cu117 && \
    python -c "import torch; print(f'PyTorch {torch.__version__} installed with CUDA support')"

# STEP 6: Install Cython BEFORE youtokentome
RUN echo "=== INSTALLING CYTHON ===" && \
    PIP_CONSTRAINT=/tmp/constraints.txt pip install --no-cache-dir Cython>=3.0.0

# STEP 7: Install build dependencies
RUN echo "=== INSTALLING BUILD DEPS ===" && \
    PIP_CONSTRAINT=/tmp/constraints.txt pip install --no-cache-dir \
    "pyarrow>=12.0.0,<18.0.0"

# STEP 8: Install core voice processing libraries
RUN echo "=== INSTALLING VOICE PROCESSING LIBS ===" && \
    PIP_CONSTRAINT=/tmp/constraints.txt pip install --no-cache-dir \
    assemblyai>=0.34.0 \
    pydub>=0.25.1 \
    librosa>=0.10.0 \
    soundfile>=0.13.0 && \
    python -c "import assemblyai; from pydub import AudioSegment; import librosa; print('✓ Voice libs installed')"

# STEP 9: Install supabase WITH CONSTRAINTS (critical!)
RUN echo "=== INSTALLING SUPABASE WITH CONSTRAINTS ===" && \
    PIP_CONSTRAINT=/tmp/constraints.txt pip install --no-cache-dir "supabase>=2.9.0" && \
    python -c "import pydantic; assert pydantic.__version__ == '2.9.2', f'DOWNGRADED TO {pydantic.__version__}!'"

# STEP 10: Install NeMo dependencies first (with constraints to prevent PyTorch upgrade)
RUN echo "=== INSTALLING NEMO DEPENDENCIES ===" && \
    PIP_CONSTRAINT=/tmp/constraints.txt pip install --no-cache-dir \
    hydra-core>=1.3.0 \
    pytorch-lightning>=2.0.0,<2.1.0 \
    omegaconf>=2.3 \
    tensorboard \
    text-unidecode \
    wget \
    wrapt \
    ruamel.yaml \
    scikit-learn>=1.3,<1.5 \
    "numpy>=1.22,<1.24" \
    scipy \
    webdataset \
    braceexpand \
    editdistance \
    g2p-en \
    inflect \
    jiwer \
    kaldiio \
    kaldi-python-io \
    librosa>=0.10.0 \
    marshmallow \
    matplotlib \
    packaging \
    pandas \
    pesq \
    pystoi \
    pyworld \
    resampy \
    sacremoses \
    sentencepiece \
    soundfile \
    sox \
    huggingface-hub \
    onnx>=1.7.0 \
    youtokentome>=1.0.6 || echo "Some NeMo dependencies installed with warnings"

# STEP 10b: Verify PyTorch versions haven't changed
RUN echo "=== VERIFYING PYTORCH VERSIONS AFTER DEPENDENCIES ===" && \
    python -c "import torch; assert '2.0.1' in torch.__version__, f'PyTorch version changed to {torch.__version__}'" && \
    python -c "import torchaudio; assert '2.0.2' in torchaudio.__version__, f'Torchaudio version changed to {torchaudio.__version__}'" && \
    echo "✓ PyTorch versions locked successfully"

# STEP 10c: Install NeMo without dependencies
RUN echo "=== INSTALLING NEMO CORE ===" && \
    pip install --no-cache-dir --no-deps nemo-toolkit[asr]==1.21.0

# STEP 11: FORCE REINSTALL Pydantic v2 (nuclear option to override NeMo's v1)
RUN echo "=== FORCING PYDANTIC V2 BACK ===" && \
    pip uninstall -y pydantic pydantic-core pydantic-settings 2>/dev/null || true && \
    rm -rf /usr/local/lib/python3*/site-packages/pydantic* && \
    rm -rf /usr/local/lib/python3*/site-packages/Pydantic* && \
    find /usr/local -name "*.so" | grep -i pydantic | xargs rm -f 2>/dev/null || true && \
    find /usr/local -name "*pydantic*" -type f -delete 2>/dev/null || true && \
    pip install --no-cache-dir --force-reinstall --no-deps \
        pydantic==2.9.2 \
        pydantic-core==2.23.4 \
        pydantic-settings==2.6.1 && \
    pip install --no-cache-dir \
        typing-extensions>=4.6.1 \
        annotated-types>=0.4.0 && \
    python -c "import pydantic; print(f'✓ Pydantic v2 restored: {pydantic.__version__}')"

# STEP 12: Install base requirements CAREFULLY without breaking NeMo
# We skip packages that would conflict with NeMo dependencies
RUN echo "=== INSTALLING BASE REQUIREMENTS (SELECTIVE) ===" && \
    echo "Skipping full requirements.txt to preserve NeMo dependencies" && \
    PIP_CONSTRAINT=/tmp/constraints.txt pip install --no-cache-dir \
    flask==3.0.0 \
    flask-cors==4.0.0 \
    gunicorn==21.2.0 \
    python-dotenv==1.0.0 \
    boto3==1.34.34 \
    openai>=1.26.0 \
    moviepy==1.0.3 \
    pandas>=2.0,<2.3 \
    python-dateutil==2.9.0.post0 \
    requests>=2.32.0 \
    psutil>=7.0.0 \
    google-api-python-client>=2.181.0 \
    google-auth-httplib2>=0.2.0 \
    google-auth-oauthlib>=1.2.0 \
    audioread>=3.0.0 || echo "Some packages may have warnings"

# STEP 12b: Verify critical dependencies are still present
RUN echo "=== VERIFYING CRITICAL PACKAGES ===" && \
    python -c "import sys; print('Python:', sys.version)" && \
    python -c "import numpy; print(f'✓ NumPy: {numpy.__version__}')" && \
    python -c "import torch; print(f'✓ PyTorch: {torch.__version__}')" && \
    python -c "import pydantic; print(f'✓ Pydantic: {pydantic.__version__}')" && \
    echo "Note: Hydra-core is installed in Step 10"

# STEP 13: Verify critical imports and PyTorch/torchaudio compatibility
RUN echo "=== VERIFYING CRITICAL IMPORTS ===" && \
    python -c "import sys; import torch; import torchaudio; print('Python:', sys.version); print('✓ PyTorch:', torch.__version__); print('✓ Torchaudio:', torchaudio.__version__); print('✓ CUDA version:', torch.version.cuda if hasattr(torch.version, 'cuda') else 'N/A'); print('✓ CUDA available:', torch.cuda.is_available())" && \
    python -c "import torch; dummy = torch.randn(1, 16000); import torchaudio.transforms as T; r = T.Resample(16000, 8000); print('✓ Torchaudio transforms: OK')" && \
    python -c "from pydub import AudioSegment; import assemblyai as aai; import librosa; print('✓ Pydub: OK'); print('✓ AssemblyAI: OK'); print('✓ Librosa: OK')" && \
    python -c "print('=== VOICE DEPENDENCIES VERIFIED ===')" && \
    echo "Note: NeMo dependencies (hydra, omegaconf) installed in Step 10"

# STEP 14: FINAL VERIFICATION - Essential checks only
RUN echo "=== FINAL BUILD VERIFICATION ===" && \
    python -c "import sys, torch, torchaudio, numpy, pydantic; from pydantic import TypeAdapter; from supabase import create_client; print(f'Python: {sys.version}'); print(f'PyTorch: {torch.__version__}'); print(f'Torchaudio: {torchaudio.__version__}'); print(f'NumPy: {numpy.__version__}'); print(f'Pydantic: {pydantic.__version__}'); print(f'CUDA version in PyTorch: {torch.version.cuda if hasattr(torch.version, \"cuda\") else \"N/A\"}'); print(f'CUDA available: {torch.cuda.is_available()}'); assert '2.0.1' in torch.__version__; assert '2.0.2' in torchaudio.__version__; assert pydantic.__version__ == '2.9.2'; assert 'TypeAdapter' in dir(pydantic); print('✅ BUILD SUCCESSFUL - ALL CRITICAL VERSIONS WITH CUDA SUPPORT LOCKED')" || (echo "FATAL ERROR: Build verification failed!" && exit 1)

# Copy application
COPY backend/ .

# Make scripts executable
RUN chmod +x /app/scripts/*.py /app/scripts/*.sh || true

# Create user
RUN useradd -m appuser && chown -R appuser:appuser /app
USER appuser

EXPOSE 8080

CMD ["bash", "scripts/start_voice_job.sh"]