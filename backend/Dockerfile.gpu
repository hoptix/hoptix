# ---- GPU-enabled Docker image for Voice Diarization ----
# Optimized for minimal disk usage
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 AS builder

# Set all environment variables
ENV CUDA_HOME=/usr/local/cuda \
    PATH=${CUDA_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH} \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONDONTWRITEBYTECODE=1

# Install system dependencies and Python 3.11 in one layer, clean immediately
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    software-properties-common tzdata && \
    ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.11 python3.11-dev python3.11-distutils python3-pip \
    gcc g++ ffmpeg libsndfile1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR /app

# Copy requirements
COPY backend/requirements.txt backend/requirements-voice-minimal.txt ./

# Install ALL Python dependencies in ONE layer to minimize disk usage
RUN python3.11 -m pip install --no-cache-dir --upgrade pip setuptools wheel && \
    # Install Cython first
    pip install --no-cache-dir Cython>=3.0.0 && \
    # Install PyArrow with binary only
    pip install --no-cache-dir --only-binary=pyarrow "pyarrow>=12.0.0,<18.0.0" && \
    # Install PyTorch with CUDA
    pip install --no-cache-dir torch==2.0.0+cu118 torchaudio==2.0.0+cu118 \
        --index-url https://download.pytorch.org/whl/cu118 && \
    # Install base requirements
    pip install --no-cache-dir --ignore-installed blinker -r requirements.txt && \
    # Install voice requirements (minimal set - allow failures for optional deps)
    pip install --no-cache-dir -r requirements-voice-minimal.txt || true && \
    # Aggressive cleanup - all in one command to save space
    find /usr/local/lib/python3.11/dist-packages -type d -name "__pycache__" -delete && \
    find /usr/local/lib/python3.11/dist-packages -type d -name "tests" -delete && \
    find /usr/local/lib/python3.11/dist-packages -type d -name "test" -delete && \
    find /usr/local/lib/python3.11/dist-packages -name "*.pyc" -delete && \
    find /usr/local/lib/python3.11/dist-packages -name "*.pyo" -delete && \
    find /usr/local/lib/python3.11/dist-packages -name "*.c" -delete && \
    find /usr/local/lib/python3.11/dist-packages -name "*.cpp" -delete && \
    find /usr/local/lib/python3.11/dist-packages -name "*.h" -delete && \
    rm -rf /root/.cache /tmp/* /var/tmp/* /usr/local/lib/python3.11/dist-packages/*/tests

# Copy application code
COPY backend/ .

# ---- Final Stage - Minimal runtime image ----
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 AS final

ENV CUDA_HOME=/usr/local/cuda \
    PATH=${CUDA_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH} \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PATH="/app/scripts:$PATH" \
    FLASK_ENV=production \
    IMAGEIO_FFMPEG_EXE=/usr/bin/ffmpeg \
    FFMPEG_BINARY=/usr/bin/ffmpeg \
    PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512

WORKDIR /app

# Install minimal runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    software-properties-common tzdata && \
    ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.11 python3.11-distutils ffmpeg libsndfile1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy only essential Python packages (exclude unnecessary stuff)
COPY --from=builder /usr/local/lib/python3.11/dist-packages /usr/local/lib/python3.11/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /app /app

# Make scripts executable and create user
RUN chmod +x /app/scripts/*.py /app/start.sh 2>/dev/null || true && \
    useradd -m -s /bin/bash appuser && \
    chown -R appuser:appuser /app && \
    mkdir -p /home/appuser/.cache/torch/hub /home/appuser/.cache/huggingface /home/appuser/.cache/nemo && \
    chown -R appuser:appuser /home/appuser/.cache

USER appuser

ENV TORCH_HOME=/home/appuser/.cache/torch \
    HF_HOME=/home/appuser/.cache/huggingface \
    NEMO_CACHE_DIR=/home/appuser/.cache/nemo

EXPOSE 8080

CMD ["python", "scripts/run_voice_diarization.py", "--help"]
