version: '3.8'

services:
  # Auth Service (Go)
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: hoptix-auth-service
    ports:
      - "8081:8081"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - PORT=8081
    networks:
      - hoptix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Backend (Flask)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hoptix-backend
    ports:
      - "8000:8000"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - RAW_BUCKET=${RAW_BUCKET}
      - DERIV_BUCKET=${DERIV_BUCKET:-hoptix-deriv-devprod}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ASR_MODEL=${ASR_MODEL:-whisper-1}
      - STEP1_MODEL=${STEP1_MODEL:-gpt-4o-mini}
      - STEP2_MODEL=${STEP2_MODEL:-gpt-4o-mini}
      - SQS_QUEUE_URL=${SQS_QUEUE_URL}
      - AAI_API_KEY=${AAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
    networks:
      - hoptix-network
    depends_on:
      - auth-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_FLASK_API_URL=http://localhost:8000
        - NEXT_PUBLIC_AUTH_SERVICE_URL=http://localhost:8081
    container_name: hoptix-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    networks:
      - hoptix-network
    depends_on:
      - backend
      - auth-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  hoptix-network:
    driver: bridge

# To run in production:
# docker-compose up -d
#
# To run with custom env file:
# docker-compose --env-file .env.production up -d
#
# To rebuild:
# docker-compose up -d --build
#
# To view logs:
# docker-compose logs -f [service-name]
