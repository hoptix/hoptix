openapi: 3.0.3
info:
  title: Supabase Auth Service API
  description: |
    A production-ready Go microservice that wraps Supabase Auth API with additional security, middleware, and comprehensive testing.

    ## Authentication

    Most endpoints require authentication via the `Authorization` header:
    ```
    Authorization: Bearer <jwt-token>
    ```

    Admin endpoints require either:
    - Service role key: `Authorization: Bearer <service-role-key>`
    - Admin user JWT: `Authorization: Bearer <admin-jwt-token>`

    ## Rate Limiting

    All endpoints include rate limiting headers:
    - `X-RateLimit-Limit`: Maximum requests per window
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Time until window resets (seconds)

    ## Error Handling

    All errors follow a consistent format:
    ```json
    {
      "code": 400,
      "msg": "Error description",
      "details": "Additional context (optional)"
    }
    ```

  version: 1.0.0
  contact:
    name: Supabase Auth Service
    url: https://github.com/your-org/supabase-auth-service
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://auth-api.yourdomain.com
    description: Production server

security:
  - bearerAuth: []
  - serviceRoleAuth: []

paths:
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Returns service health status and basic information
      security: []
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: supabase-auth-service
                  version:
                    type: string
                    example: 1.0.0
                  timestamp:
                    type: string
                    example: "2025-05-30T00:00:00Z"

  /settings:
    get:
      tags:
        - Public
      summary: Get public settings
      description: Returns publicly available authentication settings
      security: []
      responses:
        "200":
          description: Public settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"

  /signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user with email/phone and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /token:
    post:
      tags:
        - Authentication
      summary: Login and token refresh
      description: |
        OAuth2 token endpoint supporting:
        - Password grant (login)
        - Refresh token grant
      security: []
      parameters:
        - name: grant_type
          in: query
          required: true
          schema:
            type: string
            enum: [password, refresh_token]
          description: The OAuth2 grant type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/PasswordGrantRequest"
                - $ref: "#/components/schemas/RefreshTokenRequest"
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: "#/components/schemas/PasswordGrantRequest"
                - $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid credentials or token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /login-admin:
    post:
      tags:
        - Authentication
      summary: Admin login with privilege verification
      description: |
        Enhanced authentication endpoint for administrators that performs:
        1. Standard user authentication
        2. Admin privilege verification via database lookup
        3. Returns combined authentication and admin details
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminLoginRequest"
      responses:
        "200":
          description: Admin authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLoginResponse"
        "400":
          description: Invalid credentials or request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User is not an admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error (database connectivity, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /verify:
    get:
      tags:
        - Authentication
      summary: Verify user (redirect)
      description: Verify email/phone confirmation via GET redirect (used in email links)
      security: []
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [signup, recovery, magiclink, invite, email_change]
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: redirect_to
          in: query
          schema:
            type: string
            format: uri
      responses:
        "303":
          description: Redirect to application with tokens in fragment
          headers:
            Location:
              schema:
                type: string
                example: "https://yourapp.com#access_token=xxx&refresh_token=yyy"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Authentication
      summary: Verify user (JSON)
      description: Verify email/phone confirmation via POST with JSON response
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyRequest"
      responses:
        "200":
          description: Verification successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /resend:
    post:
      tags:
        - Authentication
      summary: Resend confirmation
      description: Resend confirmation email or SMS
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendRequest"
      responses:
        "200":
          description: Confirmation sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    type: string

  /recover:
    post:
      tags:
        - Authentication
      summary: Password recovery
      description: Send password recovery email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecoverRequest"
      responses:
        "200":
          description: Recovery email sent (always returns 200 to prevent email enumeration)
          content:
            application/json:
              schema:
                type: object

  /magiclink:
    post:
      tags:
        - Authentication
      summary: Send magic link
      description: Send passwordless login link via email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MagicLinkRequest"
      responses:
        "200":
          description: Magic link sent successfully
          content:
            application/json:
              schema:
                type: object

  /otp:
    post:
      tags:
        - Authentication
      summary: Send OTP
      description: Send one-time password via email or SMS
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPRequest"
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object

  /user:
    get:
      tags:
        - User Management
      summary: Get user profile
      description: Retrieve current user's profile information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update current user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Reauthentication required or invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /reauthenticate:
    get:
      tags:
        - User Management
      summary: Reauthenticate user
      description: Verify user identity for sensitive operations
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Reauthentication successful
          content:
            application/json:
              schema:
                type: object

  /logout:
    post:
      tags:
        - User Management
      summary: Logout user
      description: Invalidate user's refresh tokens
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object

  /admin/users:
    post:
      tags:
        - Admin
      summary: Create user (Admin)
      description: Create a new user with admin privileges
      security:
        - serviceRoleAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserRequest"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - admin privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/users/{user_id}:
    put:
      tags:
        - Admin
      summary: Update user (Admin)
      description: Update any user with admin privileges
      security:
        - serviceRoleAuth: []
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - admin privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/generate_link:
    post:
      tags:
        - Admin
      summary: Generate action link (Admin)
      description: Generate confirmation, recovery, or magic links programmatically
      security:
        - serviceRoleAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateLinkRequest"
      responses:
        "200":
          description: Link generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateLinkResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - admin privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /invite:
    post:
      tags:
        - Admin
      summary: Invite user (Admin)
      description: Send invitation to new user
      security:
        - serviceRoleAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteRequest"
      responses:
        "200":
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - admin privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /authorize:
    get:
      tags:
        - OAuth
      summary: OAuth authorization
      description: Initiate OAuth flow with external provider
      security: []
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
            enum: [google, github, facebook, apple, discord, twitter, linkedin]
        - name: redirect_to
          in: query
          schema:
            type: string
            format: uri
        - name: scopes
          in: query
          schema:
            type: string
            description: Additional OAuth scopes (space-separated)
      responses:
        "302":
          description: Redirect to OAuth provider
          headers:
            Location:
              schema:
                type: string

  /callback:
    get:
      tags:
        - OAuth
      summary: OAuth callback
      description: Handle OAuth provider callback
      security: []
      parameters:
        - name: code
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: error
          in: query
          schema:
            type: string
      responses:
        "302":
          description: Redirect to application with tokens
          headers:
            Location:
              schema:
                type: string
                example: "https://yourapp.com#access_token=xxx&refresh_token=yyy"
        "400":
          description: OAuth error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /debug/token:
    get:
      tags:
        - Debug
      summary: Token inspection (Development)
      description: Inspect current JWT token claims (development only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token information
          content:
            application/json:
              schema:
                type: object
                properties:
                  aud:
                    type: string
                    description: Audience
                    example: "authenticated"
                  exp:
                    type: integer
                    description: Expiration timestamp
                    example: 1640995200
                  iat:
                    type: integer
                    description: Issued at timestamp
                    example: 1640908800
                  iss:
                    type: string
                    description: Issuer
                    example: "https://your-project.supabase.co/auth/v1"
                  sub:
                    type: string
                    description: Subject (user ID)
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  email:
                    type: string
                    description: User email
                    example: "user@example.com"
                  phone:
                    type: string
                    description: User phone number
                    example: "+1234567890"
                  app_metadata:
                    type: object
                    description: Application metadata
                  user_metadata:
                    type: object
                    description: User metadata
                  role:
                    type: string
                    description: User role
                    example: "authenticated"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login
    serviceRoleAuth:
      type: http
      scheme: bearer
      description: Service role key for admin operations

  schemas:
    ErrorResponse:
      type: object
      required:
        - code
        - msg
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 400
        msg:
          type: string
          description: Error message
          example: "Invalid request"
        details:
          type: string
          description: Additional error details
          example: "Email is required"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        aud:
          type: string
          description: Audience
          example: "authenticated"
        role:
          type: string
          description: User role
          example: "authenticated"
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        email_confirmed_at:
          type: string
          format: date-time
          description: Email confirmation timestamp
          example: "2023-01-01T00:00:00Z"
        phone_confirmed_at:
          type: string
          format: date-time
          description: Phone confirmation timestamp
          example: "2023-01-01T00:00:00Z"
        last_sign_in_at:
          type: string
          format: date-time
          description: Last sign in timestamp
          example: "2023-01-01T00:00:00Z"
        app_metadata:
          type: object
          description: Application metadata
        user_metadata:
          type: object
          description: User metadata
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp
          example: "2023-01-01T00:00:00Z"

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          description: Token type
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration in seconds
          example: 3600
        expires_at:
          type: integer
          description: Token expiration timestamp
          example: 1640995200
        refresh_token:
          type: string
          description: Refresh token
          example: "refresh_token_string"
        user:
          $ref: "#/components/schemas/User"

    SettingsResponse:
      type: object
      properties:
        external_email_enabled:
          type: boolean
          description: Whether email signup is enabled
          example: true
        external_phone_enabled:
          type: boolean
          description: Whether phone signup is enabled
          example: true
        external_providers_enabled:
          type: boolean
          description: Whether external providers are enabled
          example: true
        disable_signup:
          type: boolean
          description: Whether signup is disabled
          example: false
        mailer_autoconfirm:
          type: boolean
          description: Whether email autoconfirm is enabled
          example: false
        phone_autoconfirm:
          type: boolean
          description: Whether phone autoconfirm is enabled
          example: false
        sms_provider:
          type: string
          description: SMS provider
          example: "twilio"

    SignupRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        password:
          type: string
          description: User password
          example: "password123"
        data:
          type: object
          description: Additional user metadata
        captcha_token:
          type: string
          description: Captcha token for verification

    PasswordGrantRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        password:
          type: string
          description: User password
          example: "password123"

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token
          example: "refresh_token_string"

    VerifyRequest:
      type: object
      required:
        - type
        - token
      properties:
        type:
          type: string
          enum: [signup, recovery, magiclink, invite, email_change]
          description: Verification type
        token:
          type: string
          description: Verification token
        redirect_to:
          type: string
          format: uri
          description: Redirect URL after verification

    ResendRequest:
      type: object
      required:
        - type
        - email
      properties:
        type:
          type: string
          enum: [signup, recovery]
          description: Resend type
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        captcha_token:
          type: string
          description: Captcha token for verification

    RecoverRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        captcha_token:
          type: string
          description: Captcha token for verification

    MagicLinkRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        create_user:
          type: boolean
          description: Whether to create user if not exists
          example: true
        captcha_token:
          type: string
          description: Captcha token for verification

    OTPRequest:
      type: object
      required:
        - phone
      properties:
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        create_user:
          type: boolean
          description: Whether to create user if not exists
          example: true
        captcha_token:
          type: string
          description: Captcha token for verification

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: New email
          example: "newemail@example.com"
        phone:
          type: string
          description: New phone number
          example: "+1234567890"
        password:
          type: string
          description: New password
          example: "newpassword123"
        data:
          type: object
          description: User metadata to update

    AdminUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        password:
          type: string
          description: User password
          example: "password123"
        email_confirm:
          type: boolean
          description: Whether to confirm email
          example: true
        phone_confirm:
          type: boolean
          description: Whether to confirm phone
          example: true
        user_metadata:
          type: object
          description: User metadata
        app_metadata:
          type: object
          description: Application metadata
        ban_duration:
          type: string
          description: Ban duration (e.g., "24h", "none")
          example: "none"

    GenerateLinkRequest:
      type: object
      required:
        - type
        - email
      properties:
        type:
          type: string
          enum:
            [
              signup,
              invite,
              magiclink,
              recovery,
              email_change_current,
              email_change_new,
            ]
          description: Link type
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        new_email:
          type: string
          format: email
          description: New email for email change
          example: "newemail@example.com"
        password:
          type: string
          description: User password (for signup)
          example: "password123"
        data:
          type: object
          description: Additional user metadata
        redirect_to:
          type: string
          format: uri
          description: Redirect URL

    GenerateLinkResponse:
      type: object
      properties:
        action_link:
          type: string
          format: uri
          description: Generated action link
          example: "https://your-project.supabase.co/auth/v1/verify?token=..."
        email_otp:
          type: string
          description: Email OTP code
          example: "123456"
        hashed_token:
          type: string
          description: Hashed token
        verification_type:
          type: string
          description: Verification type
        redirect_to:
          type: string
          format: uri
          description: Redirect URL

    InviteRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        data:
          type: object
          description: Additional user metadata
        redirect_to:
          type: string
          format: uri
          description: Redirect URL after invitation acceptance

    AdminLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        password:
          type: string
          description: User password
          example: "password123"

    AdminLoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          description: Token type
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration in seconds
          example: 3600
        expires_at:
          type: integer
          description: Token expiration timestamp
          example: 1640995200
        refresh_token:
          type: string
          description: Refresh token
          example: "refresh_token_string"
        user:
          $ref: "#/components/schemas/User"
        admin_details:
          $ref: "#/components/schemas/AdminUserDetails"

    AdminUserDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User UUID
          example: "26a20af0-109d-43e0-ae38-2e35148fff64"
        email:
          type: string
          format: email
          description: Administrator's email address
          example: "admin@example.com"
        is_admin:
          type: boolean
          description: Admin status flag (always true for successful responses)
          example: true
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          example: "2023-01-01T00:00:00Z"
